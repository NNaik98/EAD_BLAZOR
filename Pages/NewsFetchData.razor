@page "/newsfetch"
@inject HttpClient Http;


@using System.Runtime.Serialization;

<h1>News API</h1>

<style>
    .dot {
        border-style:dotted;
        
    }
</style>
@if (todoItems == null)
{
    <p><em>Loading ...</em></p>
}
else
{


    <div>
        <label for="name">News Name</label>
        <input id="name" @bind="name" /> <button @onclick="GetNewsAsync">Lookup</button>
        <p></p>
    </div>

    <br />
    @if (found)
    {


        @if (todoItems.articles.Count == 0)
        {


            <p>Nothing found</p>
        }
        else
        {

           
                
                   
                        @*<th>Source</th>*@
                       @* <th>Author</th>
                        <th>Title</th>
                        <th>Description</th>
                        <th>Published Date</th>
                        <th>Content</th>
                        <th>URL</th>*@
                 
               
                    @foreach (var article in todoItems.articles)
                    {
<div class="dot">


    <div><h5><strong>Source : </strong> @article.author</h5></div>
    <div><h5><strong>Publish Date : </strong> @article.publishedAt.ToShortDateString()</h5> </div>
    <div><h5> <strong>Title :</strong> @article.title</h5></div>
    <div><h5><strong>Description :</strong> @article.description </h5></div>

    <div><h5><strong>Content : </strong> @article.content</h5></div>
    <div><h5><strong>Urls : </strong><a href="@article.url">Link to Article</a></h5></div>

</div>
<br />
                    }
            

        }
           @* @foreach (var article in todoItems.articles)
            {


                <div>
                    Source : @article.source.name

                </div><div>
                    Title : @article.title

                </div><div>
                    URL : @article.url

                </div><div>
                    URL : @article.publishedAt.ToString();

                </div>  }
        }*@
    }
}






@code {
    private Root todoItems;

    private string errormessage;
    private bool found;

    public string name { get; set; } = "sports";

    public async Task GetNewsAsync()
    {
        found = false;
        try
        {
            string uri = "https://newsapi.org/v2/everything?q=" + name + "&apiKey=f74374b084a74f87a9c6270128e9962e";

            todoItems = await Http.GetFromJsonAsync<Root>(uri);
            found = true;
            errormessage = String.Empty;
        }
        catch (Exception e)
        {
            errormessage = e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetNewsAsync();
    }


    // Root myDeserializedClass = JsonConvert.DeserializeObject<Root>(myJsonResponse);
    public class Source
    {
        public string id { get; set; }
        public string name { get; set; }
    }

    public class Article
    {
        public Source source { get; set; }
        public string author { get; set; }
        public string title { get; set; }
        public string description { get; set; }
        public string url { get; set; }
        public string urlToImage { get; set; }
        public DateTime publishedAt { get; set; }
        public string content { get; set; }
    }

    public class Root
    {
        public string status { get; set; }
        public int totalResults { get; set; }
        public List<Article> articles { get; set; }
    }

}