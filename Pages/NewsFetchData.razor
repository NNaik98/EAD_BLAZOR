@page "/newsfetch"
@inject HttpClient Http;


@using System.Runtime.Serialization;

<h1>News API</h1>

<style>
    .dot {
        border-style: dotted;
    }
</style>
@if (todoItems == null)
{
    <p><em>Loading ...</em></p>
}
else
{
    <div>
        <label for="name">Filter News Channel</label>
        <input id="name" @bind="name" @onkeyup="@PressEnter" /> <button @onclick="GetNewsAsync">Search</button>

    </div>

    <div>
        <form>
            <div class="form-group">
                <label for="exampleFormControlSelect1">Filter Source</label>
                <select @bind="filter" class="form-control" id="exampleFormControlSelect1">
                    <option value=" ">All</option>
                    @foreach (var item in SourceList())
                    {

                        <option>@item</option>
                    }

                </select>
            </div>
        </form>
    </div>
    <br />
    @if (found)
    {


        @if (todoItems.articles.Count == 0)
        {

            <p>Nothing found</p>
        }
        else
        {
            <button @onclick="() => SortDateByDateAscending()">Ascending</button>
            <button @onclick="() => SortDateByDateDescending()">Descending</button>
            <br />
            <br/>

            foreach (var article in todoItems.articles)
            {
                if (filterArticle(article))
                {
                <div class="dot">
                    <div><h5><strong>Source : </strong> @article.source.name</h5></div>
                    <div><h5><strong>Author : </strong> @article.author</h5></div>
                    <div><h5><strong>Publish Date : </strong> @article.publishedAt.ToLongDateString()</h5> </div>
                    <div><h5> <strong>Title :</strong> @article.title</h5></div>
                    <div><h5><strong>Description :</strong> @article.description </h5></div>

                    <div><h5><strong>Content : </strong> @article.content</h5></div>
                    <div><h5><strong>URLs : </strong><a href="@article.url">Link to Article</a></h5></div>

                </div>
                <br />
                    }
                }
            }
        }
}
@code {
    private string filter { get; set; }
    private Root todoItems;
    private string errormessage;
    private bool found;

    public string name { get; set; } = "sports";

    public async Task GetNewsAsync()
    {
        found = false;
        try
        {
            string uri = "https://newsapi.org/v2/everything?q=" + name + "&apiKey=f74374b084a74f87a9c6270128e9962e";

            todoItems = await Http.GetFromJsonAsync<Root>(uri);
            found = true;
            errormessage = String.Empty;
        }
        catch (Exception e)
        {
            errormessage = e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetNewsAsync();
    }


    public HashSet<String> SourceList()
    {
        return todoItems.articles.Select(e => e.source.name).ToHashSet();
    }

    public bool filterArticle(Article article ){

        Console.WriteLine(filter);

        if (string.IsNullOrWhiteSpace(filter)) {

            return true;

        }

        if (article.source.name.Equals(filter))
        {
            return true;
        }

        return false;

    }

  

    public void SortDateByDateAscending()
    {
        todoItems.articles = todoItems.articles.OrderBy(e => e.publishedAt).ToList();
    }

    public void SortDateByDateDescending()
    {
        todoItems.articles = todoItems.articles.OrderByDescending(e => e.publishedAt).ToList();
    }

    public async Task PressEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await GetNewsAsync();
        }
    }


   

}